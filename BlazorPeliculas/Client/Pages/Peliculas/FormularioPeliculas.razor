@inject IRepositorio repositorio

<EditForm Model="Pelicula" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label>Titulo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Titulo"/>
            <ValidationMessage For="@(() => Pelicula.Titulo)"/>
        </div>
    </div>

    <div class="mb-3">
        <label>En cartelera:</label>
        <div>
            <InputCheckbox @bind-Value="@Pelicula.EnCartelera" />
            <ValidationMessage For="@(() => Pelicula.EnCartelera)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Trailer" />
            <ValidationMessage For="@(() => Pelicula.Trailer)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha de lanzamiento:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Pelicula.Lanzamiento" />
            <ValidationMessage For="@(() => Pelicula.Lanzamiento)" />
        </div>
    </div>

    <div class="mb-3">
        <InputIMG Label="Poster" ImagenSeleccionada2="ImagenSeleccionada2" ImagenByte="@imagenByte" />
    </div>

    <div class="mb-3 form-markdown">
        <InputMarkDown @bind-Value="@Pelicula.Resumen"
                       For=@(() => Pelicula.Resumen)
                       Label="Resumen" />
    </div>

    <div class="mb-3">
        <label>Generos:</label>
        <div>
            <SelectorMultiple NoSeleccionados="NoSeleccionados" Seleccionados="Seleccionados">
            </SelectorMultiple>
        </div>
    </div>

    <div class="mb-3">
        <label>Actores:</label>
        <div>
            <SelectorMultipleTypeahead Context="Actor" SearchMethod="BuscarActores"
                ElementosSeleccionados="ActoresSeleccionados">
            <MyListTemplate>
                @Actor.Nombre / <input type="text" placeholder="Personaje" @bind="Actor.Personaje"/>
            </MyListTemplate>
            <MyResultTemplate>
                    @if (Actor.Foto2 is not null)
                    {
                        <img style="width: 50px" src="@($"data:image/png;base64,{Convert.ToBase64String(Actor.Foto2)}")"/>
                        @Actor.Nombre
                    }
                    else
                    {
                        <img style="width: 50px" src="@Actor.Foto2"/>
                        @Actor.Nombre
                    }
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button class="btn btn-success">Guardar Cambios</button>
</EditForm>

@code {
    byte[]? imagenByte;

    [Parameter]
    [EditorRequired]
    public Pelicula Pelicula { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<Genero> GeneroSeleccionados { get; set; } = new List<Genero>();

    [Parameter]
    [EditorRequired]
    public List<Genero> GeneroNoSeleccionados { get; set; } = new List<Genero>();

    [Parameter]
    public List<Actor> ActoresSeleccionados { get; set; } = new List<Actor>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

    protected override void OnInitialized()
    {
        if (Pelicula.Poster2 is not null)
        {
            imagenByte = Pelicula.Poster2;
            Pelicula.Poster2 = null;
        }
        Seleccionados =
        GeneroSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();

        NoSeleccionados =
        GeneroNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
    }
    private void ImagenSeleccionada2(byte[] imgByte)
    {
        Pelicula.Poster2 = imgByte;
        imagenByte = null;
    }
    private async Task<IEnumerable<Actor>> BuscarActores(string searchText)
    {
        var respuestaHTTP = await repositorio.Get<List<Actor>>($"api/actores/buscar/{searchText}");
        return respuestaHTTP!.Response!;
    }
    private async Task OnDataAnnotationsValidated()
    {
        Pelicula.GenerosPelicula = Seleccionados.Select(x => new GeneroPelicula { GeneroId = int.Parse(x.Llave) }).ToList();

        Pelicula.PeliculasActor = ActoresSeleccionados.Select(x => new PeliculaActor{ActorId = x.Id, Personaje = x.Personaje}).ToList();

        await OnValidSubmit.InvokeAsync();
    }    
}
